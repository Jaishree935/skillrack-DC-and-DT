Previous Line Expansion Pattern 

The program must accept an integer N as the input. 
The program must print N lines of output based on the following conditions. 
     - In the 1st line, the upper case alphabet A must be printed. 
     - In the 2nd line, the upper case alphabets ABA must be printed (ABA -> 1st line + B + 1st line). 
     - In the 3rd line, the upper case alphabets ABACABA must be printed (ABACABA -> 2nd line + C + 2nd line). 
     - In the 4th line, the upper case alphabets ABACABADABACABA must be printed (ABACABADABACABA -> 3rd line + D + 3rd line). 
     - Similarly, the program must print the remaining lines as the output. 

Boundary Condition(s): 
1 <= N <= 18 

Input Format: 
The first line contains N. 

Output Format: 
The first N lines, each containing a string value. 

Example Input/Output 1: 
Input: 
3 
Output: 
A 
ABA 
ABACABA 
Explanation: 
Here N=3. 
The 1st line contains the upper case alphabet A. 
The 2nd line contains the upper case alphabets ABA (A + B + A) 
The 3rd line contains the upper case alphabets ABACABA (ABA + C + ABA). 
Hence the output is 
A 
ABA 
ABACABA 
Example Input/Output 2: 
Input: 
6 
Output: 
A 
ABA 
ABACABA 
ABACABADABACABA 
ABACABADABACABAEABACABADABACABA 
ABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABAD



code:
import java.util.*;
public class Hello {

    public static void main(String[] args) {
        Scanner s= new Scanner(System.in);
        int n=s.nextInt();
        StringBuilder sb=new StringBuilder("A");
        for(int i=0;i<n;i++){
            System.out.println(sb);
            char c=(char)('A'+i+1);
            sb=new StringBuilder(sb).append(c).append(sb);
        }
	}
}
